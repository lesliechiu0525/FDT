#fram
class StandardTrans():
    def __init__(self):
        pass
    def transform(self,data):
        #time series trans and make sure the ascending is True df's index must be trade_date
        #must be ["trade_date","ts_code',"close"]
        #to trans basic data
        pass
    def factor(self,data):
        #to return factor data
        #must be ["trade_date',"ts_code","factor_name1","factor_name2"...]
        #by this method you can get rolling factor base on time series date or any func to create new factor
        #df's index must be trade_date
        pass

class Strategy():
    def __init__(self,*args):
        #instance with some rules
        # self.longcon=
        # self.shortcon=
        # self.closecon=
        pass

class Environment():
    def __init__(self,*args,basic_data,factor_data,Strategy):
        #bulit the environment
        #self.commission=
        #self.position=(the position each trade use)
        #and you're supposed to type the attri with the input arguments
        pass
    def get_token(self,*args):
        #to return a pandas or list or series
        pass
    def trade(self,*args,token):
        #you need to trans the input element to standard date_range
        #token
        # date_range=args
        # for i in date_range:
        #     if data[i]==buycon:
        #         buy
        #     if data[i]==sellcon:
        #         sell
        #     if data[i]==closecon:
        #         close
        #you can print some info
        #you need to create today's element of token(cash position and net_value)
        #and concat to the token df or list

        # return token(this is result df)
        pass

class analysis():
    def __init__(self,token):
        pass
    def get_analysis(self):
        #you need print some statistic indicator
        pass
